# Database configuration for Auth Service
spring.datasource.url=jdbc:postgresql://localhost:5432/auth_db
spring.datasource.username=postgres
spring.datasource.password=Chaymetwa123@
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver

# Keycloak OAuth2 Resource Server Configuration
# For resource server use, this will validate the JWT token
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/TrungHieu
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# Keycloak client configuration
spring.security.oauth2.client.registration.keycloak.client-id=java-demo
spring.security.oauth2.client.registration.keycloak.client-secret=5qRtFRbd9PnrV87Ivu9xTWOJjJ9wMweK
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.keycloak.token-uri=http://localhost:8080/realms/TrungHieu/protocol/openid-connect/token

# Additional JWT Token Details (for internal usage)
# For decoding and verifying the JWT token from Keycloak
jwt.auth.converter.resource-id=java-demo
jwt.auth.converter.principle-attribute=preferred_username

# Keycloak Admin Configuration for CRUD Operations
# These are used to interact with Keycloak's admin API directly, which is needed for syncing user data
keycloak.admin.client-id=java-demo
keycloak.admin.client-secret=5qRtFRbd9PnrV87Ivu9xTWOJjJ9wMweK
keycloak.admin.token-url=http://localhost:8080/realms/TrungHieu/protocol/openid-connect
keycloak.admin.realm=TrungHieu

# Server Port for Auth Service
server.port=8086
