# Database configuration for Auth Service
spring.datasource.url=jdbc:postgresql://localhost:5432/user_db
spring.datasource.username=postgres
spring.datasource.password=Chaymetwa123@
spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/migration/V1__schema.sql

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver

# Keycloak OAuth2 Resource Server Configuration
# For resource server use, this will validate the JWT token
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/TrungHieu
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# Additional JWT Token Details (for internal usage)
# For decoding and verifying the JWT token from Keycloak
jwt.auth.converter.resource-id=java-demo
jwt.auth.converter.principle-attribute=preferred_username

# Kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=demoGroup
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.jackson.default-property-inclusion=NON_NULL

# Server Port for User Service
server.port=8088
